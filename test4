import cv2
import numpy as np

def detect_number_plate(image_path):
    img = cv2.imread(image_path)
    
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    
    plate_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_russian_plate_number.xml')
    
    plates = plate_cascade.detectMultiScale(blur, scaleFactor=1.5, minNeighbors=5)
    
    for (x, y, w, h) in plates:
        roi = img[y:y + h, x:x + w]
        cv2.imshow('Number Plate', roi)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        
        # Call a function to identify and verify the number plate against the database
        identify_number_plate(roi)

def identify_number_plate(plate_image):
    # Placeholder function to identify and verify the number plate against the database
    # Implement your logic here
    
    # For demonstration purposes, let's assume the number plate details
    car_name = "Toyota IST"
    reg_number = "B357AWS"
    owner_name = "Topo Rapula"
    
    print(f"Car: {car_name}\nRegistration Number: {reg_number}\nOwner: {owner_name}")

def detect_face(image_path):
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)
    
    for (x, y, w, h) in faces:
        roi_gray = gray[y:y + h, x:x + w]
        roi_color = img[y:y + h, x:x + w]
        
        eyes = eye_cascade.detectMultiScale(roi_gray)
        
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)
        
        cv2.imshow('Face Recognition', roi_color)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        
        # Call a function to identify and verify the face against the database
        identify_face(roi_gray)

def identify_face(face_image):
    # Placeholder function to identify and verify the face against the database
    # Implement your logic here
    
    # For demonstration purposes, let's assume the face belongs to the owner of the car
    owner_name = "Topo Rapula"
    
    print(f"Face identified as: {owner_name}")

# Example usage
image_path = 'pictures/image12.jpg'
detect_number_plate(image_path)
detect_face(image_path)
