import cv2
import numpy as np

def detect_number_plate(image_path):
    # Load the image
    img = cv2.imread(image_path)
    
    # Convert the image to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    # Apply blurring to reduce noise
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    
    # Use OpenCV's Haarcascades for license plate detection
    plate_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_russian_plate_number.xml')
    
    # Detect license plates
    plates = plate_cascade.detectMultiScale(blur, scaleFactor=1.5, minNeighbors=5)
    
    for (x, y, w, h) in plates:
        roi = img[y:y + h, x:x + w]
        cv2.imshow('Number Plate', roi)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

# Call the function with the path to the image
detect_number_plate('pictures/image.jpg')
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

def detect_face(image_path):
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)
    
    for (x, y, w, h) in faces:
        roi_gray = gray[y:y + h, x:x + w]
        roi_color = img[y:y + h, x:x + w]
        
        eyes = eye_cascade.detectMultiScale(roi_gray)
        
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)
        
        cv2.imshow('Face Recognition', roi_color)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

# Call the function with the path to the image
detect_face('pictures/image.jpg')

